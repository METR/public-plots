stages:
  filter_out_partial_agents:
    cmd: >-
      python -m src.filter_out_partial_agents
      --input-all-runs data/external/all_runs.jsonl
      --output-runs-with-allowed-agents data/processed/runs/ga_agents.jsonl
    deps:
      - data/external/all_runs.jsonl
      - src/filter_out_partial_agents.py
    outs:
      - data/processed/runs/ga_agents.jsonl

  filter_aird_runs:
    cmd: >-
      python -m src.filter_aird_runs
      --input-file data/external/all_runs.jsonl
      --output-file data/processed/runs/aird.jsonl
    deps:
      - data/external/all_runs.jsonl
      - src/filter_aird_runs.py
    params:
      - stages.filter_aird_runs
    outs:
      - data/processed/runs/aird.jsonl

  # Wrangle
  wrangle_bar_by_time_allocation:
    cmd: >-
      python -m src.wrangle.bar_by_time_allocation
      --runs-file data/processed/runs/aird.jsonl
      --wrangled-file data/processed/wrangled/bar_by_time_allocation.jsonl
    deps:
      - data/processed/runs/aird.jsonl
      - src/utils/plots.py
      - src/stats/statistics.py
      - src/wrangle/bar_by_time_allocation.py
    params:
      - n_bootstrap
      - rebench_best_of_k_parameters
    outs:
      - data/processed/wrangled/bar_by_time_allocation.jsonl
    desc: Compute mean scores and hierarchical confidence intervals for final time limit.

  wrangle_human_mean_of_percentiles:
    cmd: >-
      python -m src.wrangle.human_mean_of_percentiles
      --interpolated-scores data/processed/runs/aird.jsonl
      --output-percentiles data/processed/wrangled/human_mean_of_percentiles.jsonl
      --log-level ${log_level}
    deps:
      - src/wrangle/human_mean_of_percentiles.py
      - data/processed/runs/aird.jsonl
    params:
      - log_level
    outs:
      - data/processed/wrangled/human_mean_of_percentiles.jsonl
    desc: Calculate per-task percentiles of human scores over time and their mean.

  wrangle_score_at_k:
    cmd: >-
      python -m src.wrangle.score_at_k
      --input-score-at-k data/processed/runs/aird.jsonl
      --output-score-at-k data/processed/wrangled/score_at_k.jsonl
      --n-bootstrap ${n_bootstrap}
    deps:
      - src/wrangle/score_at_k.py
      - data/processed/runs/aird.jsonl
    params:
      - log_level
      - n_bootstrap
      - rebench_best_of_k_parameters
    outs:
      - data/processed/wrangled/score_at_k.jsonl

  wrangle_logistic_regression:
    matrix:
      weighting: ["equal_task_weight", "invsqrt_task_weight"]
      categories: ["ftr"]
      regularization: [0.01, 0.1]
    cmd: >-
      python -m src.wrangle.logistic
      --input-file data/external/all_runs.jsonl
      --output-file data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_${item.categories}.csv
      --weighting ${item.weighting}
      --regularization ${item.regularization}
      --bootstrap-file data/wrangled/bootstrap/${item.weighting}-${item.categories}-${item.regularization}.csv
      --categories ${item.categories}
    deps:
      - src/wrangle/logistic.py
      - data/external/all_runs.jsonl
      - data/wrangled/bootstrap/${item.weighting}-${item.categories}-${item.regularization}.csv
    outs:
      - data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_${item.categories}.csv

  wrangle_bootstrap_logistic:
    matrix:
      weighting: ["equal_task_weight", "invsqrt_task_weight"]
      categories: ["ftr"]
      regularization: [0.01, 0.1]
    cmd: >-
      python -m src.wrangle.bootstrap
      --input-file data/external/all_runs.jsonl
      --output-file data/wrangled/bootstrap/${item.weighting}-${item.categories}-${item.regularization}.csv
      --weights-col ${item.weighting}
      --categories ${item.categories}
      --n-bootstrap 500
    deps:
      - src/wrangle/bootstrap.py
      - src/wrangle/logistic.py
      - data/external/all_runs.jsonl
    outs:
      - data/wrangled/bootstrap/${item.weighting}-${item.categories}-${item.regularization}.csv
    desc: Compute bootstrapped logistic regression results

  # Plot

  plot_bar_chart:
    matrix:
      weighting: ["invsqrt_task_weight"]
      boot_set: ["None"]
      pass_at_k_sampling: ["None"]
      regularization: [0.1]
    cmd: >-
      python -m src.plot.bar_chart
      --metrics-file data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_ftr.csv
      --output-file plots/bar_chart/${item.weighting}.${plot_format}
      --log-level ${log_level}
      --weighting ${item.weighting}
      --boot-set ${item.boot_set}
      --pass-at-k-sampling ${item.pass_at_k_sampling}
      --params params.yaml:plots
    deps:
      - data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_ftr.csv
      - src/plot/bar_chart.py
      - src/utils/plots.py
    params:
      - plots
      - log_level
      - plot_format
    plots:
      - plots/bar_chart/${item.weighting}.${plot_format}
    desc: Generate bar chart of agent horizon.

  plot_bar_by_time_allocation:
    cmd: >-
      python -m src.plot.bar_by_time_allocation
      --input data/processed/wrangled/bar_by_time_allocation.jsonl
      --output plots/bar_by_time_allocation.${plot_format}
      --log-level ${log_level}
    deps:
      - data/processed/wrangled/bar_by_time_allocation.jsonl
      - src/plot/bar_by_time_allocation.py
      - src/utils/plots.py
      - matplotlibrc
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/bar_by_time_allocation.${plot_format}
    desc: Generate plot of mean scores for different time limits with confidence intervals.

  plot_score_at_k:
    matrix:
      time_limit: ${rebench_best_of_k_parameters.time_limits}
    cmd: >-
      python -m src.plot.score_at_k
      --input-score-at-k data/processed/wrangled/score_at_k.jsonl
      --input-human-mean-of-percentiles data/processed/wrangled/human_mean_of_percentiles.jsonl
      --output-prefix plots/aird/score_at_k
      --time-limit ${item.time_limit}
      --log-level ${log_level}
    deps:
      - src/plot/score_at_k.py
      - data/processed/wrangled/score_at_k.jsonl
      - data/processed/wrangled/human_mean_of_percentiles.jsonl
      - src/utils/plots.py
      - src/stats/statistics.py
    params:
      - log_level
      - plot_format
      - plots
      - rebench_best_of_k_parameters
    plots:
      - plots/aird/score_at_k_${item.time_limit}.${plot_format}
    desc: Generate plot of score at k for different time limits.

  plot_logistic_regression:
    matrix:
      weighting: ["invsqrt_task_weight"]
      categories: ["ftr"]
      regularization: [0.1]
      trendlines: [true, false]
      include_task_distribution: ["full", "none"]
      after_date: ["2024-01-01", "2023-03-13"]
    cmd: >-
      python -m src.plot.logistic
      --input-file data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_${item.categories}.csv
      --runs-file data/external/all_runs.jsonl
      --release-dates data/external/release_dates.yaml
      --output-file plots/logistic/${item.weighting}-${item.regularization}-${item.trendlines}-${item.categories}-${item.after_date}-distr_${item.include_task_distribution}.${plot_format}
      --log-level ${log_level}
      --trendlines ${item.trendlines}
      --after-date ${item.after_date}
      --weighting "${item.weighting}"
      --include-task-distribution ${item.include_task_distribution}
    deps:
      - src/plot/logistic.py
      - data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_${item.categories}.csv
      - src/utils/plots.py
      - data/external/release_dates.yaml
      - matplotlibrc
      - data/external/all_runs.jsonl
    params:
      - log_level
      - plot_format
      - plots
      - weighting
    plots:
      - plots/logistic/${item.weighting}-${item.regularization}-${item.trendlines}-${item.categories}-${item.after_date}-distr_${item.include_task_distribution}.${plot_format}
    desc: Generate plot of logistic regression results.

  plot_logistic_multiverse:
    cmd: >-
      python -m src.plot.logistic_multiverse
      --input-file-prefix data/wrangled/logistic_regression_
      --release-dates data/external/release_dates.yaml
      --output-file plots/logistic/logistic_multiverse.${plot_format}
      --metrics-file metrics/horizon_trend/multiverse.yaml
      --log-level ${log_level}
      --weightings "equal_task_weight,invsqrt_task_weight"
      --regularization "0.1,0.01"
      --categories "ftr"
    deps:
      - src/plot/logistic_multiverse.py
      - src/plot/logistic.py # dependency on plot_trendline
      - data/wrangled/
      - data/external/release_dates.yaml
      - matplotlibrc
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/logistic/logistic_multiverse.${plot_format}
    metrics:
      - metrics/horizon_trend/multiverse.yaml
    desc: Generate plot of logistic regression results.

  plot_logistic_individual:
    matrix:
      weighting: ["invsqrt_task_weight"]
      regularization: [0.01, 0.1]
    cmd: >-
      python -m src.plot.logistic_individual
      --input-file data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_ftr.csv
      --output-file plots/logistic_individual/${item.weighting}-${item.regularization}.${plot_format}
      --log-level ${log_level}
    deps:
      - src/plot/logistic_individual.py
      - data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_ftr.csv
      - src/utils/plots.py
      - matplotlibrc
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/logistic_individual/${item.weighting}-${item.regularization}.${plot_format}
    desc: Generate plot of logistic regression results.

  plot_bootstrap_ci:
    matrix:
      weighting: ["invsqrt_task_weight"]
      categories: ["ftr"]
      after_date: ["2023-03-13", "2024-01-01"]
      regularization: [0.1]
    cmd: >-
      python -m src.plot.bootstrap_ci
      --input-file data/wrangled/bootstrap/${item.weighting}-${item.categories}-${item.regularization}.csv
      --release-dates data/external/release_dates.yaml
      --output-file plots/bootstrap/${item.weighting}-${item.categories}-${item.after_date}-${item.regularization}.${plot_format}
      --weighting ${item.weighting}
      --categories ${item.categories}
      --regularization ${item.regularization}
      --log-level ${log_level}
      --n-samples 60
      --after-date ${item.after_date}
    deps:
      - src/plot/bootstrap_ci.py
      - src/plot/logistic.py # dependency on plot_trendline
      - data/wrangled/bootstrap/${item.weighting}-${item.categories}-${item.regularization}.csv
      - data/external/release_dates.yaml
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/bootstrap/${item.weighting}-${item.categories}-${item.after_date}-${item.regularization}.${plot_format}
    desc: Generate plot of bootstrap confidence intervals
